"""Assignment 1 - Grocery Store Events (Task 2)

This file should contain all of the classes necessary to model the different
kinds of events in the simulation.
"""
# Feel free to import classes and functions from
# *your other files*, but remember not to import any external libraries.


class Event:
    """An event.

    Events have an ordering based on the event timestamp in non-ascending
    order. Events with older timestamps are less than those with newer
    timestamps.

    This class is abstract; subclasses must implement do().

    You may, if you wish, change the API of this class to add
    extra public methods or attributes. Make sure that anything
    you add makes sense for ALL events, and not just a particular
    event type.

    Document any such changes carefully!

    === Attributes ===
    @type timestamp: int
        A timestamp for this event.
    """

    def __init__(self, timestamp):
        """Initialize an Event with a given timestamp.

        @type self: Event
        @type timestamp: int
            A timestamp for this event.
            Precondition: must be a non-negative integer.
        @rtype: None

        >>> Event(7).timestamp
        7
        """
        self.timestamp = timestamp

    # The following six 'magic methods' are overridden to allow for easy
    # comparison of Event instances. All comparisons simply perform the
    # same comparison on the 'timestamp' attribute of the two events.
    def __eq__(self, other):
        """Return whether this Event is equal to <other>.

        Two events are equal if they have the same timestamp.

        @type self: Event
        @type other: Event
        @rtype: bool

        >>> first = Event(1)
        >>> second = Event(2)
        >>> first == second
        False
        >>> second.timestamp = first.timestamp
        >>> first == second
        True
        """
        return self.timestamp == other.timestamp

    def __ne__(self, other):
        """Return True iff this Event is not equal to <other>.

        @type self: Event
        @type other: Event
        @rtype: bool

        >>> first = Event(1)
        >>> second = Event(2)
        >>> first != second
        True
        >>> second.timestamp = first.timestamp
        >>> first != second
        False
        """
        return not self.__eq__(other)

    def __lt__(self, other):
        """Return True iff this Event is less than <other>.

        @type self: Event
        @type other: Event
        @rtype: bool

        >>> first = Event(1)
        >>> second = Event(2)
        >>> first < second
        True
        >>> second < first
        False
        """
        return self.timestamp < other.timestamp

    def __le__(self, other):
        """Return True iff this Event is less than or equal to <other>.

        @type self: Event
        @type other: Event
        @rtype: bool

        >>> first = Event(1)
        >>> second = Event(2)
        >>> first <= first
        True
        >>> first <= second
        True
        >>> second <= first
        False
        """
        return self.timestamp <= other.timestamp

    def __gt__(self, other):
        """Return True iff this Event is greater than <other>.

        @type self: Event
        @type other: Event
        @rtype: bool

        >>> first = Event(1)
        >>> second = Event(2)
        >>> first > second
        False
        >>> second > first
        True
        """
        return not self.__le__(other)

    def __ge__(self, other):
        """Return True iff this Event is greater than or equal to <other>.

        @type self: Event
        @type other: Event
        @rtype: bool

        >>> first = Event(1)
        >>> second = Event(2)
        >>> first >= first
        True
        >>> first >= second
        False
        >>> second >= first
        True
        """
        return not self.__lt__(other)

    def do(self, store):
        """Perform this Event.

        Call methods on <store> to update its state according to the
        meaning of the event. Note: the "business logic" of what actually
        happens inside a grocery store should be handled in the GroceryStore
        class, not in any Event classes.

        Return a list of new events spawned by this event (making sure the
        timestamps are correct).

        @type self: Event
        @type store: GroceryStore
        @rtype: list[Event]
            A list of events generated by performing this event.
        """
        raise NotImplementedError


# TODO: Create subclasses for the different types of events below.

class NewArrive(Event):
    """
    The event of a new customer arriving.
    A new Customer object is created. The Customer is assigned to a Line.
    The waiting time for this Customer starts.
    === Public attributes ===
    @type timestamp: int
    @type name: str
    @type items: int
    """

    def __init__(self, timestamp, name, items):
        """
        Initializes a NewArrive event.
        @type self: NewArrive
        @type timestamp: int
        @type name: str
        @type items: int
        @rtype: None

        >>> a = NewArrive(0, 'Jack', 4)
        >>> a.timestamp
        0
        >>> a.name
        'Jack'
        >>> a.items
        4
        """
        super(NewArrive, self).__init__(timestamp)
        self.name = name
        self.items = items

    def do(self, store):
        """
        Overrides the do method in super.
        @type self: NewArrive
        @type store: GroceryStore
        @rtype: list[Event]
        """
        return_events = []
        which_line = store.new_join(self.timestamp, self.name, self.items)

        if len(store.check_out_lines.lines[which_line].customers) == 1:
            is_first_in_line = True
        else:
            is_first_in_line = False
        if is_first_in_line:
            return_events.append(Begin(self.timestamp, self.name))
            return return_events
        else:
            return None


class Begin(Event):
    """
    A customer begins to check out.
    Generates a Finish event some seconds later
    === Public attributes ===
    @type timestamp: int
    @type name: str
    """

    def __init__(self, timestamp, name):
        """
        Initializes a Begin event: a Customer begins checking out.
        @type self: Begin
        @type timestamp: int
        @type name: str
        @rtype: None

        >>> a = Begin(3, 'Jack')
        >>> a.timestamp
        3
        >>> a.name
        'Jack'
        """
        super(Begin, self).__init__(timestamp)
        self.name = name

    def do(self, store):
        """
        Overrides the do method in super.
        @type self: Begin
        @type store: GroceryStore
        @rtype: list[Event]
        """
        return_events = []
        check_out_time = store.begin_check_out(self.timestamp, self.name)
        finish_time = self.timestamp + check_out_time
        return_events.append(Finish(finish_time, self.name))
        return return_events


class Finish(Event):
    """
    A customer finishes checking out.
    === Public attributes ===
    @type timestamp: int
    @type name: str
    """

    def __init__(self, timestamp, name):
        """
        Initializes a Finish event: a Customer finishes checking out.
        @type self: Finish
        @type timestamp: int
        @type name: str
        @rtype: None

        >>> a = Finish(3, 'Jack')
        >>> a.timestamp
        3
        >>> a.name
        'Jack'
        """
        super(Finish, self).__init__(timestamp)
        self.name = name

    def do(self, store):
        """
        Overrides the do method in super.
        @type self: Finish
        @type store: GroceryStore
        @rtype: list[Event]
        """
        return_events = []
        next_name = store.finish_check_out(self.timestamp, self.name)
        if next_name == None:
            pass
        else:
            return_events.append(Begin(self.timestamp, next_name))
            return return_events


class CloseLine(Event):
    """
    A check out line closes.
    First Customer doesn't change. All the other Customers have to be reassigned.
    === Public attributes ===
    @type timestamp: int
    @type which_line: int
    """

    def __init__(self, timestamp, which_line):
        """
        Initializes a CloseLine event.
        @type self: CloseLine
        @type timestamp: int
        @type which_line: int
        @rtype: None

        >>> c = CloseLine(19, 0)
        >>> c.timestamp
        19
        >>> c.which_line
        0
        """
        super(CloseLine, self).__init__(timestamp)
        self.which_line = which_line

    def do(self, store):
        """
        Overrides the do method in super.
        @type self: CloseLine
        @type store: GroceryStore
        @rtype: list[Event]
        """
        return_events = []
        customers = store.close_line(self.timestamp, self.which_line)
        for x in range(len(customers)):
            return_events.append(
                NewArrive(self.timestamp + 1 + x, customers[x].name,
                           customers[x].items))


# TODO: Complete this function, which creates a list of events from a file.
def create_event_list(filename):
    """Return a list of Events based on raw list of events in <filename>.

    Precondition: the file stored at <filename> is in the format specified
    by the assignment handout.

    @param filename: str
        The name of a file that contains the list of events.
    @rtype: list[Event]
    """
    events = []
    with open(filename, 'r') as file:
        for line in file:
            # Create a list of words in the line,
            # e.g. ['60', 'Arrive', 'Bob', '5'].
            # Note that these are strings,
            # and you'll need to convert some of them
            # to ints.
            tokens = line.split()
            if len(tokens) == 4:
                events.append(
                    NewArrive(int(tokens[0]), tokens[2], int(tokens[3])))
            elif len(tokens) == 3:
                events.append(CloseLine(int(tokens[0]), int(tokens[2])))
    return events


if __name__ == '__main__':
    import doctest

    doctest.testmod()
